<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <link rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.11.3/font/bootstrap-icons.min.css"
        integrity="sha512-dPXYcDub/aeb08c63jRq/k6GaKccl256JQy/AnOq7CAnEZ9FzSL9wSbcZkMp4R26vBsMLFYH4kQ67/bbV8XaCQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>

<style>
    body {
        font-family: 'Arial', sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f0f0f0;
        color: #333;
    }

    .container {
        width: 80%;
        margin: auto;
        text-align: center;
        padding: 20px;
        background-color: #fff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-top: 50px;
    }

    h1 {
        color: #3498db;
    }

    p {
        font-size: 18px;
        line-height: 1.6;
        text-align: left;
        margin-bottom: 20px;
    }

    /* Tabs styling */
    .tabs {
        display: flex;
        justify-content: space-around;
        background-color: #3498db;
        padding: 10px;
        margin-bottom: 20px;
    }

    .tabs a {
        color: #fff;
        text-decoration: none;
        padding: 10px;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

    .tabs a:hover {
        background-color: #2980b9;
    }

    /* Centered strong tags */
    strong {
        display: block;
        text-align: center;
        margin-bottom: 10px;
    }

    /* Log-out button styling */
    .logout-form {
        margin-top: 20px;
    }

    .logout-form button {
        background-color: #e74c3c;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }

    .logout-form button:hover {
        background-color: #c0392b;
    }

    /* styles.css */

    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        margin: 0;
        padding: 0;
    }

    .container {
        max-width: 600px;
        margin: 50px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    h1 {
        text-align: center;
        color: #333;
    }

    form {
        margin-top: 20px;
    }

    label {
        display: block;
        margin-bottom: 5px;
    }

    input[type="text"],
    input[type="number"],
    button[type="submit"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    button[type="submit"] {
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    button[type="submit"]:hover {
        background-color: #0056b3;
    }

    .comments-container {
    margin-top: 20px;
}

.comment {
    background-color: #f9f9f9;
    border-radius: 5px;
    padding: 10px;
    margin-bottom: 10px;
}

.comment p {
    margin: 0;
    font-size: 16px;
}

.comment .user {
    font-weight: bold;
    color: #333;
    margin-bottom: 5px;
}

.comment .content {
    color: #666;
}

</style>
</head>

<body>

    <!-- Tabs -->
    <div class="tabs">
        <!-- User profile -->
        <a href="/userProfile">User Profile</a>
        <!-- Goals -->
        <a href="/goals">Goals</a>
        <!-- Recommendations Tab -->
        <a href="/recommendations">Recommendations</a>
        <!--Engagement Tab -->
        <a href="/Community">Community</a>
        <!--NutritionTab -->
        <a href="/.
        ">Nutrition Plan</a>
        <!-- About Us/FAQ Tab-->
        <a href="/">HomePage</a>
        <!--Contact Tab -->
        <a href="/contact">Contact</a>
        <!--log out-->
        <form action="/logout?_method=DELETE" method="POST" class="logout-form">
            <button type="submit">Log Out</button>
        </form>
    </div>
    <div class="container pt-5">
        <div class="row">
            <div class="col col-12">
                <p class="h2">Community</p>
            </div>
        </div>

        <div class="row">
            <form action="/community" method="POST" class="form form-control">
                <label for="title">Title:</label>
                <br>
                <input type="text" id="title" name="title">
                <br>
                <label for="content">Content:</label>
                <br>
                <textarea name="content" id="content" cols="60" rows="10"></textarea>
                <br>
                <button class="btn-primary btn">Submit</button>

            </form>
        </div>
        <br>
        <br>
        <br>
        <button id="showPostsBtn" class="btn btn-primary">ShowPosts</button>

        <div class="row">

            <div class="col-col-12 d-none" id="postsContainer">


            </div>
        </div>
    </div>
</body>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const showPostsBtn = document.getElementById("showPostsBtn")
        console.log(showPostsBtn);
        const postsContainer = document.getElementById('postsContainer');

        showPostsBtn.addEventListener('click', function () {

            postsContainer.classList.toggle('d-none')
        })


        // Function to fetch all posts from the server
        function fetchPosts() {
            fetch('/posts')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch posts');
                    }
                    return response.json();
                })
                .then((posts) => {
                    console.log(posts);
                    // Clear existing posts before adding new ones
                    postsContainer.innerHTML = '';
                    posts.forEach((post) => {
                        const postElement = createPostElement(post);
                        postsContainer.appendChild(postElement);
                        console.log(post.id, " fetchPost")

                        fetchComments(post.id)
                    })
                })
                .catch((error) => {
                    console.error('Error Fetching posts: ', error);
                    postsContainer.innerHTML = '<p>Error fetching posts please try again later </p>'
                });
        }
        // fetchPosts(); // dummy test1




        // // logic for adding comments

        function createPostElement(post) {
            const postElement = document.createElement('div')
            postElement.classList.add('post');

            postElement.innerHTML =
                `
                    <h2>${post.title}</h2>
                    <p>${post.content}</p>
                    <form class="commentForm">
                        <input type="hidden" name="postId" value="${post.id}" />
                        <input type="text" name="commentContent" placeholder="Add a comment" />
                        <button type="submit">Add Comment</button>
                    </form>
                    <div class="commentsContainer" data-postid="${post.id}"></div>
    `;


            const commentForm = postElement.querySelector('.commentForm');
            const commentsContainer = postElement.querySelector('.commentsContainer');

            // Event Listener for comment form submission

            commentForm.addEventListener('submit', event => {
                event.preventDefault();

                const formData = new FormData(commentForm);
                const commentContent = formData.get('commentContent');
                const postId = formData.get('postId');
                addComment(postId, commentContent);
            });
            return postElement;

        }

        // function to fetch comments for the current post
        function fetchComments(postId) {
            console.log(postId, "TTTT");

            fetch(`/posts/${postId}/comments`)
                .then((response) => {
                    if (!response.ok) {
                        throw new Error("Failed to fetch comments");
                    }
                    return response.json();
                })
                .then((comments) => {
                    console.log(comments, "cccc")
                    const commentsContainer = document.querySelector(`.commentsContainer[data-postid="${postId}"]`);

                    console.log(commentsContainer, "ccc")
                    console.log("Received Comments: ", comments);
                    commentsContainer.innerHTML = "";
                    comments.forEach((comment) => {
                        const commentElement = document.createElement("div");
                        commentElement.classList.add("comment");
                        // /// dummy test 2
                        commentElement.textContent = comment.content;
                        // commentElement.textContent = `${comment.username}: ${comment.content}`;
                        // commentElement.textContent = `${comment.content}`;
                        commentsContainer.appendChild(commentElement);
                    })
                })
                .catch((error) => {
                    console.error("Error fetching comments: ", error);
                    commentsContainer.innerHTML =
                        "<p>Error fetching comments. Please try again....</p>"
                })


        }

        // Function to add a comment to a post
        function addComment(postId, commentContent) {
            fetch('/comments', {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ postId, content: commentContent })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to add comment');
                    }
                    return response.json();
                })
                .then(comment => {
                    console.log("Comment added successfully:", comment);
                    // Optionally, update the UI to reflect the new comment
                    fetchComments(postId); // Assuming you have a function to fetch comments
                })
                .catch(error => {
                    console.error("Error adding comment: ", error);
                    alert("Failed to add comment. Please try again later");
                });
        }




        // FETCH POSTS WHEN THE PAGE LOADS
        fetchPosts();


    });
</script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
    integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
    crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
    integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
    crossorigin="anonymous"></script>

</html>